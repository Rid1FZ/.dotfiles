#!/usr/bin/env python3

import argparse
import io
import json
import os
import subprocess
import sys


def eprint(message: str) -> None:
    stream: io.TextIOWrapper = sys.stderr  # type:ignore

    try:
        stream.write(message)
    except UnicodeEncodeError:
        # Fallback to safe encoding
        encoded = message.encode(stream.encoding or "utf-8", "backslashreplace")

        if hasattr(stream, "buffer"):
            stream.buffer.write(encoded)
        else:
            # Decode back to text if binary buffer is unavailable
            fallback_text = encoded.decode(stream.encoding or "utf-8", "strict")
            stream.write(fallback_text)

    stream.flush()


def get_workspace_id() -> int:
    result = subprocess.run(
        ["hyprctl", "activeworkspace", "-j"],
        capture_output=True,
        text=True,
        check=True,
    )

    workspace_data = json.loads(result.stdout)
    return int(workspace_data["id"])


def hyprctl_dispatch(command: str, argument: str):
    return subprocess.run(
        ["hyprctl", "dispatch", command, argument],
        check=True,
    ).returncode


def hyprland_switcher(switch_to: str, flag_move: str) -> int:
    exitcode: int = 0
    direction: str

    if switch_to == "prev":
        direction = "r-1"
    else:  # next
        direction = "r+1"

    if flag_move:
        exitcode = hyprctl_dispatch("movetoworkspace", direction) or exitcode
    else:
        exitcode = hyprctl_dispatch("workspace", direction) or exitcode

    return exitcode


def custom_switcher(switch_to, flag_move, cycle, curr_workspace, max_workspaces) -> int:
    exitcode: int = 0
    next_workspace: None | int = None

    if switch_to == "prev":
        if curr_workspace == 1:
            if cycle:
                next_workspace = max_workspaces
            else:
                eprint("error: first workspace\n")
                exitcode = exitcode or 1
                return exitcode
        else:
            next_workspace = curr_workspace - 1
    else:  # next
        if curr_workspace == max_workspaces:
            if cycle:
                next_workspace = 1
            else:
                eprint("error: last workspace\n")
                exitcode = exitcode or 1
                return exitcode
        else:
            next_workspace = curr_workspace + 1

    if flag_move:
        exitcode = hyprctl_dispatch("movetoworkspace", str(next_workspace)) or exitcode
    else:
        exitcode = hyprctl_dispatch("workspace", str(next_workspace)) or exitcode

    return exitcode


def main() -> int:
    exitcode: int = 0
    max_hypr_workspaces: int = int(os.environ.get("MAX_HYPR_WORKSPACES", "0"))

    parser = argparse.ArgumentParser(
        description="Hyprland workspace switcher",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="$MAX_HYPR_WORKSPACES can be used to set the maximum number of workspaces. If it is set to 0, control is handed over to hyprland",
    )

    parser.add_argument(
        "-n",
        "--next",
        action="store_const",
        const="next",
        dest="switch_to",
        help="Next workspace",
    )
    parser.add_argument(
        "-p",
        "--prev",
        action="store_const",
        const="prev",
        dest="switch_to",
        help="Previous workspace",
    )
    parser.add_argument(
        "-m",
        "--move",
        action="store_true",
        help="Move current window to next/previous workspace specified by --next or --prev",
    )
    parser.add_argument(
        "-c", "--cycle", action="store_true", help="Cycle through workspaces"
    )

    args = parser.parse_args()

    # Validate arguments
    if not args.switch_to:
        parser.error("specify either --next or --prev")

    # Validate MAX_HYPR_WORKSPACES
    if max_hypr_workspaces < 0:
        eprint("error: invalid value of $MAX_HYPR_WORKSPACES\n")
        exitcode = exitcode or 1
        return exitcode

    curr_workspace = get_workspace_id()

    if max_hypr_workspaces == 0:
        hyprland_switcher(args.switch_to, args.move)
    else:
        custom_switcher(
            args.switch_to, args.move, args.cycle, curr_workspace, max_hypr_workspaces
        )

    return exitcode


if __name__ == "__main__":
    sys.exit(main())
