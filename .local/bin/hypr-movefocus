#!/usr/bin/env python3

import argparse
import io
import json
import subprocess
import sys


def eprint(message: str) -> None:
    stream: io.TextIOWrapper = sys.stderr  # type:ignore

    try:
        stream.write(message)
    except UnicodeEncodeError:
        # Fallback to safe encoding
        encoded = message.encode(stream.encoding or "utf-8", "backslashreplace")

        if hasattr(stream, "buffer"):
            stream.buffer.write(encoded)
        else:
            # Decode back to text if binary buffer is unavailable
            fallback_text = encoded.decode(stream.encoding or "utf-8", "strict")
            stream.write(fallback_text)

    stream.flush()


def is_fullscreened() -> bool:
    result = subprocess.run(
        ["hyprctl", "activewindow", "-j"],
        capture_output=True,
        text=True,
        check=True,
    )

    window_data = json.loads(result.stdout)
    return window_data.get("fullscreen", 0) != 0


def send_notification(title: str, message: str) -> int:
    return subprocess.run(
        ["notify-send", "--app-name=Hyprland", title, message],
        check=False,
    ).returncode


def move_focus(direction: str) -> int:
    return subprocess.run(
        ["hyprctl", "dispatch", "movefocus", direction],
        check=False,
    ).returncode


def main() -> int:
    exitcode: int = 0

    parser = argparse.ArgumentParser(
        description="Move focus between windows in Hyprland",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-l",
        action="store_const",
        const="l",
        dest="direction",
        help="Move focus to left window",
    )
    group.add_argument(
        "-r",
        action="store_const",
        const="r",
        dest="direction",
        help="Move focus to right window",
    )
    group.add_argument(
        "-u",
        action="store_const",
        const="u",
        dest="direction",
        help="Move focus to upper window",
    )
    group.add_argument(
        "-d",
        action="store_const",
        const="d",
        dest="direction",
        help="Move focus to lower window",
    )

    args = parser.parse_args()

    try:
        fullscreen_status: bool = is_fullscreened()
    except subprocess.CalledProcessError as ex:
        eprint(f"error: hyprctl command failed with message: {ex}\n")
        exitcode = exitcode or 1
        return exitcode

    if fullscreen_status:
        # fmt:off
        exitcode = send_notification(
            "Window is maximized",
            "Current window is maximized. Please tile current window to move focus",
        ) or exitcode
        # fmt:on

        return exitcode

    exitcode = move_focus(args.direction) or exitcode
    return exitcode


if __name__ == "__main__":
    sys.exit(main())
