#!/bin/env python3

import argparse
import copy
import os
import shlex
import shutil
import subprocess
import sys
from collections.abc import Generator, Iterable


def get_command() -> str | None:
    """
    Parse commandline arguments and return shell command if any available
    """
    parser: argparse.ArgumentParser = argparse.ArgumentParser(
        prog="ltmux",
        description="launch tmux",
    )

    parser.add_argument(
        "-c", help="run shell command", action="store", default=[None], nargs=1
    )

    args: argparse.Namespace = parser.parse_args()

    return args.c[0]


def get_sessions() -> Generator[str]:
    """
    Yield tmux session ids and attached state in `session_id:attached' format
    """
    yield from (
        subprocess.run(
            shlex.split("tmux ls -F '#{session_id}:#{?session_attached,1,0}'"),
            capture_output=True,
        )
        .stdout.decode()
        .splitlines(keepends=False)
    )


def run_command(command: str, env_vars: os._Environ) -> int:
    """
    Run shell command from `tmux' if available, else from `sh'
    """
    if shutil.which("tmux"):
        return subprocess.run(
            ["tmux", "-c", command],
            env=env_vars,
        ).returncode

    return subprocess.run(
        ["sh", "-c", command],
        env=env_vars,
    ).returncode


def launch_sh(env_vars: os._Environ) -> int:
    """
    Launch the `sh' shell and return it's exit code
    """
    return subprocess.run(
        ["sh"],
        env=env_vars,
    ).returncode


def launch_tmux(env_vars: os._Environ, *, sessions: Iterable[str] = []) -> int:
    """
    If any unattached tmux session is available, attach to that session,\
    else launch new tmux session
    """
    for session in sessions:
        session_id, attached = session.split(":")
        if attached == "0":
            return subprocess.run(
                shlex.split(f"tmux attach -t {session_id}"),
                env=env_vars,
            ).returncode

    return subprocess.run(
        shlex.split("tmux new"),
        env=env_vars,
    ).returncode


def main() -> int:
    """
    Driver function
    """
    shell_command: str | None = get_command()
    env_vars: os._Environ = copy.deepcopy(os.environ)

    if shell_command:
        return run_command(shell_command, env_vars)

    # in case tmux is not installed, run `sh`
    if not shutil.which("tmux"):
        return launch_sh(env_vars)

    # if tmux is already running, just skip
    if env_vars.get("TMUX"):
        print("ltmux: `tmux' is already running", file=sys.stderr)
        return 1

    try:
        del env_vars["TMUX"]
    except KeyError:
        pass

    return launch_tmux(env_vars, sessions=get_sessions())


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(130)
